"""Trading execution engine coordinating database persistence and Binance orders."""

from __future__ import annotations

from typing import Any, Dict, Tuple

from binance.client import Client
from binance.exceptions import BinanceAPIException

import database_manager as db


class TradingEngine:
    """Encapsulate the execution flow for orders generated by the bot."""

    def __init__(self, client: Client) -> None:
        self.client = client

    async def execute_order(self, order_params: Dict[str, Any], source: str = "Unknown") -> Tuple[bool, Dict[str, Any]]:
        """Persist, submit, and update an order according to the record-before-send policy."""

        local_order_id, client_order_id = db.create_order_record(order_params)
        print(f"[{source}] 주문 실행 시도 (로컬 ID: {local_order_id})")

        try:
            binance_order = self.client.futures_create_order(
                newClientOrderId=client_order_id,
                **order_params,
            )

            db.update_order_from_binance(local_order_id, binance_order)
            print(
                "✅ [{source}] 주문 성공 (바이낸스 ID: {order_id})".format(
                    source=source,
                    order_id=binance_order.get("orderId"),
                )
            )
            return True, binance_order

        except BinanceAPIException as exc:
            db.update_order_status(local_order_id, "REJECTED")
            print(f"❌ [{source}] 주문 실패 (API 오류): {exc}")
            return False, {"error": str(exc)}

        except Exception as exc:  # pragma: no cover - defensive logging
            db.update_order_status(local_order_id, "REJECTED")
            print(f"❌ [{source}] 주문 실패 (알 수 없는 오류): {exc}")
            return False, {"error": str(exc)}
